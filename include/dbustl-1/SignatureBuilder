/*
 *  DBusTL - D-Bus Template Library
 *
 *  Copyright (C) 2008, 2009  Fabien Chevalier <chefabien@gmail.com>
 *  
 *
 *  This file is part of the DBus Template Library.
 *
 *  The D-Bus Template Library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  DBus Template Library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with DBus Template Library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef DBUSTL_SIGNATUREBUILDER
#define DBUSTL_SIGNATUREBUILDER

#include <dbustl-1/types/Tools>

namespace dbustl {

#ifdef DBUSTL_CXX0X
    /** @cond */
    
    template<typename... Args>
    struct __SignatureCount;
    
    template<typename... Args>
    struct __SignatureCount;

    template<>
    struct __SignatureCount<> {
        static const int value = 0;
    };
    
    template<typename T, typename... Args>
    struct __SignatureCount<T, Args... > {
        static const int value = __SignatureCount<Args...>::value + 1;
    };
    
    
    template<typename... Args>
    struct __SignatureBuilderImpl;

    template<>
    struct __SignatureBuilderImpl<> {
        static void compute(const char* sig[], int i)
        {
            sig[i] = 0;
        }
    };
    
    template<typename T, typename... Args>
    struct __SignatureBuilderImpl<T, Args... > {
        static void compute(const char* sig[], int i)
        {
            using namespace types;
            sig[i] = Signature<T>::value();
            __SignatureBuilderImpl<Args...>::compute(sig, ++i);
        }
    };

    /** @endcond */

    template<typename... Args>
    const char* const * SignatureBuilder()
    {
        static const char* sig[__SignatureCount<Args...>::value + 1];
        int i = 0;
        
        __SignatureBuilderImpl<Args...>::compute(sig, i);
        return sig;
    }    
#else
    inline const char* const * SignatureBuilder()
    {
        static const char* sig[] = {0};
        return sig;
    }

    template<typename T1>
    const char* const * SignatureBuilder()
    {
        using namespace types;
        static const char* sig[] = {
            Signature<T1>::value(),
            0
            };
        return sig;
    }

    template<typename T1, typename T2>
    const char* const * SignatureBuilder()
    {
        using namespace types;
        static const char* sig[] = {
            Signature<T1>::value(),
            Signature<T2>::value(),
            0
            };
        return sig;
    }

    template<typename T1, typename T2, typename T3>
    const char* const * SignatureBuilder()
    {
        using namespace types;
        static const char* sig[] = {
            Signature<T1>::value(),
            Signature<T2>::value(),
            Signature<T3>::value(),
            0
            };
        return sig;
    }

    template<typename T1, typename T2, typename T3, typename T4>
    const char* const * SignatureBuilder()
    {
        using namespace types;
        static const char* sig[] = {
            Signature<T1>::value(),
            Signature<T2>::value(),
            Signature<T3>::value(),
            Signature<T4>::value(),
            0
            };
        return sig;
    }

    template<typename T1, typename T2, typename T3, typename T4, typename T5>
    const char* const * SignatureBuilder()
    {
        using namespace types;
        static const char* sig[] = {
            Signature<T1>::value(),
            Signature<T2>::value(),
            Signature<T3>::value(),
            Signature<T4>::value(),
            Signature<T5>::value(),
            0
            };
        return sig;
    }

    template<typename T1, typename T2, typename T3, typename T4, typename T5,
        typename T6>
    const char* const * SignatureBuilder()
    {
        using namespace types;
        static const char* sig[] = {
            Signature<T1>::value(),
            Signature<T2>::value(),
            Signature<T3>::value(),
            Signature<T4>::value(),
            Signature<T5>::value(),
            Signature<T6>::value(),
            0
            };
        return sig;
    }

    template<typename T1, typename T2, typename T3, typename T4, typename T5,
    typename T6, typename T7>
    const char* const * SignatureBuilder()
    {
        using namespace types;
        static const char* sig[] = {
            Signature<T1>::value(),
            Signature<T2>::value(),
            Signature<T3>::value(),
            Signature<T4>::value(),
            Signature<T5>::value(),
            Signature<T6>::value(),
            Signature<T7>::value(),
            0
            };
        return sig;
    }

    template<typename T1, typename T2, typename T3, typename T4, typename T5,
        typename T6, typename T7, typename T8>
    const char* const * SignatureBuilder()
    {
        using namespace types;
        static const char* sig[] = {
            Signature<T1>::value(),
            Signature<T2>::value(),
            Signature<T3>::value(),
            Signature<T4>::value(),
            Signature<T5>::value(),
            Signature<T6>::value(),
            Signature<T7>::value(),
            Signature<T8>::value(),
            0
            };
        return sig;
    }
#endif

}

#endif /* DBUSTL_SIGNATUREBUILDER */
