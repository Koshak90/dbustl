/*
 *  DBUSTL - DBus Template Library
 *
 *  Copyright (C) 2008  Fabien Chevalier <fabchevalier@free.fr>
 *  
 *
 *  This file is part of the DBus Template Library.
 *
 *  The DBus Template Library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  DBus Template Library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with DBus Template Library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef DBUSTL_EXCEPTION
#define DBUSTL_EXCEPTION

#include <exception>
#include <string>
#include <dbus/dbus.h>

namespace dbustl {

class DBusException : public std::exception {
    public:
        //Creates an empty Exception object
        DBusException();

        //Creates Exception object from a DBUS exception name -- THOSE MUST BE STATICALLY ALLOCATED STRINGS
        DBusException(const std::string& name, const std::string& description);

        //Copy constructor: special care must be taken
        DBusException(const DBusException& e);
        //assignmen operator: special care must be taken
        DBusException& operator=(const DBusException&);

        virtual ~DBusException() throw();

        //Expanded description of the exception of the forme "name: description"
        virtual const char* what() const throw();

        //DBUS error name : of the for XXX.YYY.ZZZ.... such as "org.freedesktop.DBus.Error.AccessDenied"
        std::string name() const;
        //A more verbose description of the exception
        std::string message() const;
        
        //Returns true if the object contains a valid exception
        bool isSet() const;
        
        //Should not be used : reserved for internal use
        DBusError* dbus() {return &_dbusError; };
        
    private:

        mutable std::string _whatMsg;
        DBusError _dbusError;
  };


}

#endif /* DBUSTL_EXCEPTION */
