/*
 *  DBUSTL - DBus Template Library
 *
 *  Copyright (C) 2008  Fabien Chevalier <fabchevalier@free.fr>
 *  
 *
 *  This file is part of the DBus Template Library.
 *
 *  The DBus Template Library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  DBus Template Library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with DBus Template Library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef DBUSTL_CONNECTION
#define DBUSTL_CONNECTION

#include <dbus/dbus.h>

#include <memory>

namespace dbustl {

    class ConnectionInitializer;
   
    class MainLoopIntegration;

    /**
     * Provides an abstraction of a DBus Connection. 
     * 
     * A DBUS connection is a dedicated link between two applications
     * that wish to exchange DBUS messages.
     * DBus connections can be either private (which is not supported
     * at the moment), or be connections to a bus, which is in charge
     * of routing messages to the right process.
     * 
     * A DBus Connection is needed to instantiate ServerProxy objects.
     * 
     * The simplest way to have a connection to a bus is through a call 
     * to Connection::systemBus or Connection::sessionBus
     * 
     * To be able to process signals, the connection must be associated 
     * with a main loop. A main loop must be provided either:
     *   - before any call to Connection::Connection, Connection::systemBus or Connection::sessionBus, using
     *     Connection::useMainLoop static member.
     *   - during object construction, through the use of 
     *     the alternate Connection(DBusBusType bustype,std::auto_ptr<MainLoopIntegration> mainLoop) constructor
     * 
     * If no signals are to be received, then main loop association 
     * remains optionnal.
     */
    class Connection {
        public:
            /**
             * Returns a singleton to the system bus.
             * 
             * Do not destroy it, it will be automatically freed at
             * program shutdown
             */
            static Connection * systemBus();

            /**
             * Returns a singleton to the session bus.
             * 
             * Do not destroy it, it will be automatically freed at
             * program shutdown
             */
            static Connection * sessionBus();

            /**
             * Specifies the Main Loop (Glib, Qt, any other) in which to integrate
             * the newly created connections.
             * It is safe to call it more than once.
             */
            static void useMainLoop(const MainLoopIntegration& mainloop);

            /** Creates a new dedicated connection on the given bus.
             * 
             * @param bustype one of {DBUS_BUS_SYSTEM, DBUS_BUS_SESSION}
             */
            explicit Connection(DBusBusType bustype);
            
            /**
             * Creates a new dedicated connection on the given bus, specifying in which main loop
             * to process received messages
             */
            Connection(DBusBusType bustype, 
              std::auto_ptr<MainLoopIntegration> mainLoop);
            
            /**
             * Destructor
             * 
             * The destructor is non virtual on purpose, this class is not
             * designed for inheritance.
             */
            ~Connection();

            /**
             * If True, means the connection is not on a system or session bus, 
             * but is private between two applications.
             */
            bool isPrivate() { return _isPrivate;};

            /**
             * The DBUS C api structure: don't use it!
             * 
             * You should only use it if you <strong>really</strong> know
             * what you are doing.
             */
            DBusConnection * dbus();

        private:
            //Disallow construct that would bypass the static initializers
            Connection(const Connection&);
            Connection& operator=(Connection&);
        
            //Low level connection
            DBusConnection *_llconn;
            //Mainloop used for this connection
            std::auto_ptr<MainLoopIntegration> _mainLoop;
            bool _isPrivate;
            
            //globally shared System bus connection
            static Connection *_system;
            //globally shared Session bus connection
            static Connection *_session;
            //default main loop
            static std::auto_ptr<MainLoopIntegration> _defaultMainLoop;
                        
            /** @cond */
            friend class ConnectionInitializer;
            /** @endcond */
            //To be called by ConnectionInitializer only
            static void cleanup();
    };

}

#endif /* DBUSTL_CONNECTION */
