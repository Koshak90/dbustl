/*
 *  DBusTL - D-Bus Template Library
 *
 *  Copyright (C) 2008, 2009  Fabien Chevalier <chefabien@gmail.com>
 *  
 *
 *  This file is part of the DBus Template Library.
 *
 *  The DBus Template Library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  DBus Template Library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with DBus Template Library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef DBUSTL_TYPES_STDTOOLS
#define DBUSTL_TYPES_STDTOOLS

#include <dbustl-1/types/Serialization>
#include <dbustl-1/types/Tools>

namespace dbustl {
namespace types {

//Tools for STL

/* Containers helpers */

// Generate a DBUS signature for a DBUS array of T
template <typename T>
struct ArraySignatureImpl {
    static const int size;
    static inline void calcValue(char *signature, int *idx) {
    	signature[*idx] = (char)DBUS_TYPE_ARRAY;
    	++(*idx);
    	SignatureImpl<T>::calcValue(signature, idx);
    }    
};

template<typename T> const int ArraySignatureImpl<T>::size = 1 + SignatureImpl<T>::size;

// Generic support for STL containers
template<typename Container>
struct ArraySerializer {
    static dbus_bool_t run(DBusMessageIter* it, const Container& arg);
};
template<typename Container>
dbus_bool_t ArraySerializer<Container>::run(DBusMessageIter* it, const Container& arg)
{
    typename Container::const_iterator containerIter;
    DBusMessageIter subIterator;
    if(dbus_message_iter_open_container(it, DBUS_TYPE_ARRAY, 
        Signature<typename Container::value_type>(), 
            &subIterator) == FALSE) {
        return FALSE;
    }
    
    for(containerIter = arg.begin(); containerIter != arg.end(); ++containerIter) {
        if(Serializer<typename Container::value_type>::run(&subIterator, *containerIter) == FALSE) {
            return FALSE;
        }
    }
    
    return dbus_message_iter_close_container(it, &subIterator);
}
template<typename Container>
struct ArrayDeserializer {
    static dbus_bool_t run(DBusMessageIter* it, Container* arg);
};
template<typename Container>
dbus_bool_t ArrayDeserializer<Container>::run(DBusMessageIter* it, Container* arg)
{
    DBusMessageIter subIterator;
    if(dbus_message_iter_get_arg_type(it) != DBUS_TYPE_ARRAY) {
        return FALSE;
    }
    
    dbus_message_iter_recurse(it, &subIterator);
    while (dbus_message_iter_get_arg_type(&subIterator) != DBUS_TYPE_INVALID) {
        arg->push_back(typename Container::value_type());
        if(Deserializer<typename Container::value_type>::run(&subIterator, &arg->back()) == FALSE) {
            return FALSE;
        }
        dbus_message_iter_next(&subIterator);
    }
    
    return TRUE;
}

}
}

#endif /* DBUSTL_TYPES_STDTOOLS */
