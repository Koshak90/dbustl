#ifndef DBUSTL_CLIENTPROXY
#define DBUSTL_CLIENTPROXY

#include <dbus/dbus.h>

#include <string>
#include <sstream>
#include <functional>

#include <dbustl/DBusException>
#include <dbustl/TypesConvertion>
#include <dbustl/Message>

namespace dbustl {

    class Connection;

    class ClientProxy {
        public:
            // Path the object path we target
            // destination is only required if this connection talks to a message bus
            // In this case it must contain the name of the connection this message is intended for,
            // otherwise giving the object path is enough
            ClientProxy(Connection* conn, const std::string& path, const std::string& destination = "");

            // For synchronous blocking calls, set the timeout to val.
            // -1 means default value
            void setTimeout(int timeout) { _timeout = timeout; };
            // Sets the interface to use for the remote object.
            // If empty(the default), the default interface is used
            void setInterface(const std::string& interface) { _interface = interface; };

        #ifndef DBUSTL_NO_EXCEPTIONS
            //Returns the last error that happened
            const DBusException& error();
        #endif

            //If fails returns false and error contains the detailed error value
            template<typename... Args>
            bool call(const std::string& methodName, const Args&... args);
            Message call(Message& method_call);
            
            //Asynchronous call : functor version
            
            template<typename MethodCallback, typename... Args>
            bool asyncCall(const std::string& methodName, const MethodCallback& callback, const Args&... args);
            
            //Asynchronous call : pointer to function version
            template<typename... Args>
            inline bool asyncCall(const std::string& methodName, void (*callback)(const Message&, const DBusException&), const Args&... args);
            
            //Asynchronous call : pointer to member version
            template<typename _Class, typename... Args>
            inline bool asyncCall(const std::string& methodName, void (_Class::*callback)(const Message&, const DBusException&), _Class *c, const Args&... args);
            
            template<typename MethodCallback>
            void asyncCall(Message& method_call, const MethodCallback& callback);

            Message createMethodCall(const std::string& methodName) const;

            //Helper class 
            class Interface {
            public:    
                Interface(std::string name) : _name(name) {};
                const std::string& name() const { return _name; };
            private:
                std::string _name;
            };

        private:
            //Disallow the following constructs
            ClientProxy(const ClientProxy& con);
            ClientProxy& operator=(ClientProxy&);
            
        #ifdef DBUSTL_NO_EXCEPTIONS
            inline void throw_or_set(const DBusException& error) {_error = error; };
            inline void throw_or_set(const chat *name, const char *message) {_error = DBusException(name, message); };
        #else
            static inline void throw_or_set(const DBusException& error) {throw error; };
            static inline void throw_or_set(const char *name, const char *message) { throw DBusException(name, message); };
        #endif
            
            /////////////////////////////////
            // Synchronous calls templates //
            /////////////////////////////////
            
            //This method processes input arguments of the form const T&
            template<typename T, typename... Args>            
            void processInArgs(Message& method_call, const T& invalue, const Args&... args);

            //This method processes input arguments of the form const T*
            template<typename T, typename... Args>            
            void processInArgs(Message& method_call, const T* invalue, const Args&... args);

            //This method processes Interface input argument
            template<typename... Args>            
            void processInArgs(Message& method_call, const Interface& intf, const Args&... args);

            //This method gets called when all arguments are processed
            template<typename T, typename... Args>            
            void processInArgs(Message& msg, T* outvalue, const Args&... args);

            void processInArgs(Message& msg);

            //This method processes output arguments of the form T*
            template<typename T, typename... Args>            
            void processOutArgs(Message& method_call, T* outvalue, const Args&... args);

            void processOutArgs(Message& method_call);
            
            //////////////////////////////////
            // Asynchronous calls templates //
            //////////////////////////////////
            
            //This method processes input arguments of the form const T&
            template<typename T, typename MethodCallback, typename... Args>            
            void processAsyncInArgs(Message& method_call, const MethodCallback& callback, const T& invalue, const Args&... args);

            //This method processes input arguments of the form const T*
            template<typename T, typename MethodCallback, typename... Args>            
            void processAsyncInArgs(Message& method_call, const MethodCallback& callback, const T* invalue, const Args&... args);

            template<typename MethodCallback>            
            void processAsyncInArgs(Message& msg, const MethodCallback& callback);

            //static methods for asynchronous calls handling
            template<typename MethodCallback>            
            static void freeMethodCallbackFunc(void *object);

            template<typename MethodCallback>            
            static void callCompleted(DBusPendingCall *pending, void *user_data);

            Connection *_conn;
            std::string _path;
            std::string _destination;
            std::string _interface;
            int _timeout; //call timeout in milliseconds, -1 means default
            DBusException _error;
    };


    template<typename... Args>
    bool ClientProxy::call(const std::string& methodName, const Args&... args)
    {
        Message method_call(createMethodCall(methodName));
        
        if(!method_call.dbus()) {
            throw_or_set(DBUS_ERROR_NO_MEMORY, "Not enough memory to allocate DBUS message");
            return false;
        }
        
        _error = DBusException();
        processInArgs(method_call, args...);
        return !_error.isSet();
    }

    template<typename T, typename... Args>            
    void ClientProxy::processInArgs(Message& method_call, const T& invalue, const Args&... args)
    {
        method_call << invalue;
        processInArgs(method_call, args...);
    }

    template<typename T, typename... Args>            
    void ClientProxy::processInArgs(Message& method_call, const T* invalue, const Args&... args)
    {
        method_call << invalue;
        processInArgs(method_call, args...);
    }

    template<typename T, typename... Args>            
    void ClientProxy::processInArgs(Message& msg, T* outvalue, const Args&... args)
    {
        //All input arguments are consumed, process call now...
        processInArgs(msg);
        if(!_error.isSet()) {
            processOutArgs(msg, outvalue, args...);
        }
    }

    template<typename... Args>            
    void ClientProxy::processInArgs(Message& method_call, const Interface& intf, const Args&... args)
    {
        dbus_message_set_interface(method_call.dbus(), intf.name().c_str());
        processInArgs(method_call, args...);
    }

    template<typename T, typename... Args>            
    void ClientProxy::processOutArgs(Message& method_reply, T* outvalue, const Args&... args)
    {
        method_reply >> outvalue;
        if(method_reply.isValid()) {
            processOutArgs(method_reply, args...);
        }
        else {
            std::stringstream ss;
            ss << "Unable to deserialize return parameter at index " << method_reply.parsedArguments() - 1;
            throw_or_set("org.dbustl.ReturnParameterError", ss.str().c_str());
        }
    }

    template<typename MethodCallback, typename... Args>
    bool ClientProxy::asyncCall(const std::string& methodName, const MethodCallback& callback, const Args&... args)
    {
        Message method_call(createMethodCall(methodName));
        
        if(!method_call.dbus()) {
            throw_or_set(DBUS_ERROR_NO_MEMORY, "Not enough memory to allocate DBUS message");
            return false;
        }
        
        _error = DBusException();
        processAsyncInArgs(method_call, callback, args...);
        return !_error.isSet();
    }
    
    template<typename... Args>
    bool ClientProxy::asyncCall(const std::string& methodName, void (*callback)(const Message&, const DBusException&), const Args&... args)
    {
        return asyncCall(methodName, std::ptr_fun(callback), args...);
    }

    template<typename _Class, typename... Args>
    bool ClientProxy::asyncCall(const std::string& methodName, void (_Class::*callback)(const Message&, const DBusException&), _Class *c, const Args&... args)
    {
        return asyncCall(methodName, std::bind(callback, c, std::placeholders::_1, std::placeholders::_2), args...);
    }

    template<typename MethodCallback>            
    void ClientProxy::asyncCall(Message& method_call, const MethodCallback& callback)
    {
	      DBusPendingCall *pending_return;
	
        if(dbus_connection_send_with_reply(_conn->dbus(), method_call.dbus(), &pending_return, _timeout) == FALSE) {
            throw_or_set(DBUS_ERROR_NO_MEMORY, "Not enough memory to send DBUS message");
            return;
        }
    
        if(pending_return) {
            if(dbus_pending_call_set_notify(pending_return, callCompleted<MethodCallback>, 
                  new MethodCallback(callback), freeMethodCallbackFunc<MethodCallback>) == FALSE) {
                throw_or_set(DBUS_ERROR_NO_MEMORY, "Not enough memory to set callback for DBUS message");
            }
        }
        else {
            throw_or_set("TBD", "Disconnected");
        }
    }

    template<typename T, typename MethodCallback, typename... Args>            
    void ClientProxy::processAsyncInArgs(Message& method_call, const MethodCallback& callback, const T& invalue, const Args&... args)
    {
        method_call << invalue;
        processAsyncInArgs(method_call, callback, args...);
    }

    template<typename T, typename MethodCallback, typename... Args>            
    void ClientProxy::processAsyncInArgs(Message& method_call, const MethodCallback& callback, const T* invalue, const Args&... args)
    {
        method_call << invalue;
        processAsyncInArgs(method_call, callback, args...);
    }

    template<typename MethodCallback>            
    void ClientProxy::processAsyncInArgs(Message& msg, const MethodCallback& callback)
    {
        if(msg.isValid()) {
            asyncCall(msg, callback);
        }
    }

    template<typename MethodCallback>            
    void ClientProxy::freeMethodCallbackFunc(void *object)
    {
        MethodCallback *cb = static_cast<MethodCallback*>(object);
        delete cb;
    }

    template<typename MethodCallback>            
    void ClientProxy::callCompleted(DBusPendingCall *pending, void *user_data)
    {
        DBusException e;
        MethodCallback *callback = static_cast<MethodCallback*>(user_data);
    
        Message reply(dbus_pending_call_steal_reply(pending));
     
        dbus_set_error_from_message(e.dbus(), reply.dbus());

        //call user function
        (*callback)(reply, e);

        delete callback;

        dbus_pending_call_unref(pending);
    }
}

#endif /* DBUSTL_CLIENTPROXY */

