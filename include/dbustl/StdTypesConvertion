#ifndef DBUSTL_STDTYPESCONVERTION
#define DBUSTL_STDTYPESCONVERTION

// STL to DBUS arguments types mapping

#include <string>
#include <cassert>
#include <dbus/dbus.h>

namespace dbustl {
  
    /* integral types */
    
    //helper functions
    template<typename T> 
    inline bool __serializeSignedIntegral(DBusMessageIter* it, const T& arg)
    {
        int dbus_type = DBUS_TYPE_INVALID;
        switch(sizeof(arg)) {
            case 2:
                dbus_type = DBUS_TYPE_INT16;
                break;
            case 4:
                dbus_type = DBUS_TYPE_INT32;
                break;
            case 8:
                dbus_type = DBUS_TYPE_INT64;
                break;
            default:
                assert("The supplied argument does not match any integer size supported by DBUS");
        }
        if(dbus_type != DBUS_TYPE_INVALID) {
            return dbus_message_iter_append_basic(it, dbus_type, &arg);
        }
        else {
            return false;
        }
    }

    template<typename T> 
    inline bool __serializeUnsignedIntegral(DBusMessageIter* it, const T& arg)
    {
        int dbus_type = DBUS_TYPE_INVALID;
        switch(sizeof(arg)) {
            case 1:
                dbus_type = DBUS_TYPE_BYTE;
                break;
            case 2:
                dbus_type = DBUS_TYPE_UINT16;
                break;
            case 4:
                dbus_type = DBUS_TYPE_UINT32;
                break;
            case 8:
                dbus_type = DBUS_TYPE_UINT64;
                break;
            default:
                assert("The supplied argument does not match any integer size supported by DBUS");
        }
        if(dbus_type != DBUS_TYPE_INVALID) {
            return dbus_message_iter_append_basic(it, dbus_type, &arg);
        }
        else {
            return false;
        }
    }
    
    /* bool */
    template<> dbus_bool_t serialize<bool>(DBusMessageIter* it, const bool& arg)
    {
        return dbus_message_iter_append_basic(it, DBUS_TYPE_BOOLEAN, &arg);
    }
    template<> dbus_bool_t deserialize<bool>(DBusMessageIter* it, bool *arg)
    {
        if(dbus_message_iter_get_arg_type(it) != DBUS_TYPE_BOOLEAN) {
            return FALSE;
        }
        dbus_message_iter_get_basic(it, arg);
        return TRUE;
    }

    /* char */
    template<> dbus_bool_t serialize<char>(DBusMessageIter* it, const char& arg)
    {
        return __serializeUnsignedIntegral<char>(it, arg);
    }

    /* signed char */
    template<> dbus_bool_t serialize<signed char>(DBusMessageIter* it, const signed char& arg)
    {
        return __serializeSignedIntegral<signed char>(it, arg);
    }

    /* unsigned char */
    template<> dbus_bool_t serialize<unsigned char>(DBusMessageIter* it, const unsigned char& arg)
    {
        return __serializeUnsignedIntegral<unsigned char>(it, arg);
    }
    template<> dbus_bool_t deserialize<unsigned char>(DBusMessageIter* it, unsigned char *arg)
    {
        if(dbus_message_iter_get_arg_type(it) != DBUS_TYPE_BYTE) {
            return FALSE;
        }
        dbus_message_iter_get_basic(it, arg);
        return TRUE;
    }

    /* short */
    template<> dbus_bool_t serialize<short>(DBusMessageIter* it, const short& arg)
    {
        return __serializeSignedIntegral<short>(it, arg);
    }
    template<> dbus_bool_t deserialize<short>(DBusMessageIter* it, short* arg)
    {
        switch(dbus_message_iter_get_arg_type(it)) {
        case DBUS_TYPE_BYTE: {
            unsigned char d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT16: {
            int16_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        default:
            return FALSE;
        };
    }

    /* unsigned short */
    template<> dbus_bool_t serialize<unsigned short>(DBusMessageIter* it, const unsigned short& arg)
    {
        return __serializeUnsignedIntegral<unsigned short>(it, arg);
    }
    template<> dbus_bool_t deserialize<unsigned short>(DBusMessageIter* it, unsigned short* arg)
    {
        switch(dbus_message_iter_get_arg_type(it)) {
        case DBUS_TYPE_BYTE: {
            unsigned char d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_UINT16: {
            uint16_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        default:
            return FALSE;
        };
    }

    /* int */
    template<> dbus_bool_t serialize<int>(DBusMessageIter* it, const int& arg)
    {
        return __serializeSignedIntegral<int>(it, arg);
    }
    template<> dbus_bool_t deserialize<int>(DBusMessageIter* it, int* arg)
    {
        switch(dbus_message_iter_get_arg_type(it)) {
        case DBUS_TYPE_BYTE: {
            unsigned char d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT16: {
            int16_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_UINT16: {
            if(sizeof(*arg) >= 4) {
                int16_t d;          
                dbus_message_iter_get_basic(it, &d);
                *arg = d;
                return TRUE;
            }
            return FALSE;
        }
        case DBUS_TYPE_INT32: {
            if(sizeof(*arg) >= 4) {
                int32_t d;          
                dbus_message_iter_get_basic(it, &d);
                *arg = d;
                return TRUE;
            }
            return FALSE;
        }
        default:
            return FALSE;
        };
    }

    /* unsigned int */
    template<> dbus_bool_t serialize<unsigned int>(DBusMessageIter* it, const unsigned int& arg)
    {
        return __serializeUnsignedIntegral<unsigned int>(it, arg);
    }
    template<> dbus_bool_t deserialize<unsigned int>(DBusMessageIter* it, unsigned int* arg)
    {
        switch(dbus_message_iter_get_arg_type(it)) {
        case DBUS_TYPE_BYTE: {
            unsigned char d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT16: {
            int16_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_UINT16: {
            if(sizeof(*arg) >= 4) {
                int16_t d;          
                dbus_message_iter_get_basic(it, &d);
                *arg = d;
                return TRUE;
            }
            return FALSE;
        }
        case DBUS_TYPE_UINT32: {
            if(sizeof(*arg) >= 4) {
                uint32_t d;          
                dbus_message_iter_get_basic(it, &d);
                *arg = d;
                return TRUE;
            }
            return FALSE;
        }
        default:
            return FALSE;
        };
    }

    /* long */
    template<> dbus_bool_t serialize<long>(DBusMessageIter* it, const long& arg)
    {
        return __serializeSignedIntegral<long>(it, arg);
    }
    template<> dbus_bool_t deserialize<long>(DBusMessageIter* it, long* arg)
    {
        switch(dbus_message_iter_get_arg_type(it)) {
        case DBUS_TYPE_BYTE: {
            unsigned char d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT16: {
            int16_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_UINT16: {
            if(sizeof(*arg) >= 4) {
                int16_t d;          
                dbus_message_iter_get_basic(it, &d);
                *arg = d;
                return TRUE;
            }
            return FALSE;
        }
        case DBUS_TYPE_INT32: {
            if(sizeof(*arg) >= 4) {
                int32_t d;          
                dbus_message_iter_get_basic(it, &d);
                *arg = d;
                return TRUE;
            }
            return FALSE;
        }
        default:
            return FALSE;
        };
    }

    /* unsigned long */
    template<> dbus_bool_t serialize<unsigned long>(DBusMessageIter* it, const unsigned long& arg)
    {
        return __serializeUnsignedIntegral<unsigned long>(it, arg);
    }
    template<> dbus_bool_t deserialize<unsigned long>(DBusMessageIter* it, unsigned long* arg)
    {
        switch(dbus_message_iter_get_arg_type(it)) {
        case DBUS_TYPE_BYTE: {
            unsigned char d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT16: {
            int16_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_UINT16: {
            if(sizeof(*arg) >= 4) {
                int16_t d;          
                dbus_message_iter_get_basic(it, &d);
                *arg = d;
                return TRUE;
            }
            return FALSE;
        }
        case DBUS_TYPE_UINT32: {
            if(sizeof(*arg) >= 4) {
                uint32_t d;          
                dbus_message_iter_get_basic(it, &d);
                *arg = d;
                return TRUE;
            }
            return FALSE;
        }
        default:
            return FALSE;
        };
    }

    /* long long */
    template<> dbus_bool_t serialize<long long>(DBusMessageIter* it, const long long& arg)
    {
        return __serializeSignedIntegral<long long>(it, arg);
    }
    template<> dbus_bool_t deserialize<long long>(DBusMessageIter* it, long long* arg)
    {
        switch(dbus_message_iter_get_arg_type(it)) {
        case DBUS_TYPE_BYTE: {
            unsigned char d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT16: {
            int16_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_UINT16: {
            int16_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT32: {
            int32_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_UINT32: {
            uint32_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT64: {
            int64_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        default:
            return FALSE;
        };
    }

    /* unsigned long long */
    template<> dbus_bool_t serialize<unsigned long long>(DBusMessageIter* it, const unsigned long long& arg)
    {
        return __serializeUnsignedIntegral<unsigned long long>(it, arg);
    }
    template<> dbus_bool_t deserialize<unsigned long long>(DBusMessageIter* it, unsigned long long* arg)
    {
        switch(dbus_message_iter_get_arg_type(it)) {
        case DBUS_TYPE_BYTE: {
            unsigned char d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT16: {
            int16_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_UINT16: {
            int16_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT32: {
            int32_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_UINT32: {
            uint32_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_INT64: {
            int64_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        case DBUS_TYPE_UINT64: {
            uint64_t d;          
            dbus_message_iter_get_basic(it, &d);
            *arg = d;
            return TRUE;
        }
        default:
            return FALSE;
        };
    }

    /* float - on way only */
    template<> dbus_bool_t serialize<float>(DBusMessageIter* it, const float& arg)
    {
        double val = arg;
        return dbus_message_iter_append_basic(it, DBUS_TYPE_DOUBLE, &val);
    }

    /* double */
    template<> dbus_bool_t serialize<double>(DBusMessageIter* it, const double& arg)
    {
        return dbus_message_iter_append_basic(it, DBUS_TYPE_DOUBLE, &arg);
    }
    template<> dbus_bool_t deserialize<double>(DBusMessageIter* it, double *arg)
    {
        if(dbus_message_iter_get_arg_type(it) != DBUS_TYPE_DOUBLE) {
            return FALSE;
        }
        dbus_message_iter_get_basic(it, arg);
        return TRUE;
    }

    /* const char* - one way only */
    template<> dbus_bool_t serialize<const char*>(DBusMessageIter* it, const char* const& arg)
    {
        return dbus_message_iter_append_basic(it, DBUS_TYPE_STRING, &arg);
    }
    
    /* std::string */
    template<> dbus_bool_t serialize<std::string>(DBusMessageIter* it, const std::string& arg)
    {
        const char *cstring = arg.c_str();
        return dbus_message_iter_append_basic(it, DBUS_TYPE_STRING, &cstring);
    }
    template<> dbus_bool_t deserialize<std::string>(DBusMessageIter* it, std::string* arg)
    {
        const char *str;
        if(dbus_message_iter_get_arg_type(it) != DBUS_TYPE_STRING) {
            return FALSE;
        }
        dbus_message_iter_get_basic(it, &str);
        *arg = str;
        return TRUE;
    }

}

#endif
