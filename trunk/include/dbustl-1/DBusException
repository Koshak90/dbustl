#ifndef DBUSTL_EXCEPTION
#define DBUSTL_EXCEPTION

#include <exception>
#include <string>
#include <dbus/dbus.h>

namespace dbustl {

class DBusException : public std::exception {
    public:
        //Creates an empty Exception object
        DBusException() throw();

        //Creates Exception object from a DBUS exception name -- THOSE MUST BE STATICALLY ALLOCATED STRINGS
        DBusException(const std::string& name, const std::string& description) throw();

        //Copy constructor: special care must be taken
        DBusException(const DBusException& e) throw();
        //assignmen operator: special care must be taken
        DBusException& operator=(const DBusException&) throw();

        virtual ~DBusException() throw();

        //Expanded description of the exception of the forme "name: description"
        virtual const char* what() const throw();

        //DBUS error name : of the for XXX.YYY.ZZZ.... such as "org.freedesktop.DBus.Error.AccessDenied"
        std::string name() const;
        //A more verbose description of the exception
        std::string message() const;
        
        //Returns true if the object contains a valid exception
        bool isSet() const throw();
        
        //Should not be used : reserved for internal use
        DBusError* dbus() {return &_dbusError; };
        
    private:

        mutable std::string _whatMsg;
        DBusError _dbusError;
  };


}

#endif /* DBUSTL_EXCEPTION */
