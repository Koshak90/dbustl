/*
 *  DBUSTL - DBus Template Library
 *
 *  Copyright (C) 2008  Fabien Chevalier <fabchevalier@free.fr>
 *  
 *
 *  This file is part of the DBus Template Library.
 *
 *  The DBus Template Library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  DBus Template Library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with DBus Template Library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef DBUSTL_TYPES_TOOLS
#define DBUSTL_TYPES_TOOLS

#include <dbus/dbus.h>

#include <string>
#include <cassert>

namespace dbustl {
namespace types {

	//For all basic types : the DBUS type into which the C++ type maps
	//This is non trivial as for instance an int will map on DBUS_TYPE_INT32 on
	//32 bit plaftorm but DBUS_TYPE_INT64 on 64 bits platforms
	template<typename T>
	inline int dbusPreferedType();

	/* Implementation */
	
	template<int N>
	inline int __dbusPreferedSignedIntegralType();
	
	template<> 
	inline int __dbusPreferedSignedIntegralType<1>() {return DBUS_TYPE_INT16;};
	template<>
	inline int __dbusPreferedSignedIntegralType<2>() {return DBUS_TYPE_INT16;};
	template<>
	inline int __dbusPreferedSignedIntegralType<4>() {return DBUS_TYPE_INT32;};
	template<>
	inline int __dbusPreferedSignedIntegralType<8>() {return DBUS_TYPE_INT64;};
	
	template<int N> 
	inline int __dbusPreferedUnsignedIntegralType();

	template<> 
	inline int __dbusPreferedUnsignedIntegralType<1>() {return DBUS_TYPE_BYTE;};
	template<> 
	inline int __dbusPreferedUnsignedIntegralType<2>() {return DBUS_TYPE_UINT16;};
	template<> 
	inline int __dbusPreferedUnsignedIntegralType<4>() {return DBUS_TYPE_UINT32;};
	template<> 
	inline int __dbusPreferedUnsignedIntegralType<8>() {return DBUS_TYPE_UINT64;};
	
	template<>
	inline int dbusPreferedType<bool>() 
	{
    	return DBUS_TYPE_BOOLEAN;
	}

	template<> 
	inline int dbusPreferedType<char>() 
	{
    	return __dbusPreferedUnsignedIntegralType<sizeof(char)>();
	}

	template<> 
	inline int dbusPreferedType<signed char>() 
	{
    	return __dbusPreferedSignedIntegralType<sizeof(signed char)>();
	}

	template<> 
	inline int dbusPreferedType<unsigned char>() 
	{
    	return __dbusPreferedUnsignedIntegralType<sizeof(unsigned char)>();
	}

	template<>
	inline int dbusPreferedType<short>() 
	{
    	return __dbusPreferedSignedIntegralType<sizeof(short)>();
	}

	template<> 
	inline int dbusPreferedType<unsigned short>() 
	{
    	return __dbusPreferedUnsignedIntegralType<sizeof(unsigned short)>();
	}

	template<> 
	inline int dbusPreferedType<int>() 
	{
    	return __dbusPreferedSignedIntegralType<sizeof(int)>();
	}

	template<> 
	inline int dbusPreferedType<unsigned int>() 
	{
    	return __dbusPreferedUnsignedIntegralType<sizeof(unsigned int)>();
	}

	template<> 
	inline int dbusPreferedType<long>() 
	{
    	return __dbusPreferedSignedIntegralType<sizeof(long)>();
	}

	template<> 
	inline int dbusPreferedType<unsigned long>() 
	{
    	return __dbusPreferedUnsignedIntegralType<sizeof(unsigned long)>();
	}

	template<> 
	inline int dbusPreferedType<long long>() 
	{	
    	return __dbusPreferedSignedIntegralType<sizeof(long long)>();
	}

	template<> 
	inline int dbusPreferedType<unsigned long long>() 
	{
    	return __dbusPreferedUnsignedIntegralType<sizeof(unsigned long long)>();
	}

	template<> 
	inline int dbusPreferedType<float>() 
	{
    	return DBUS_TYPE_DOUBLE;
	}

	template<> 
	inline int dbusPreferedType<double>() 
	{
    	return DBUS_TYPE_DOUBLE;
	}
	
	template<> 
	inline int dbusPreferedType<const char*>() 
	{
    	return DBUS_TYPE_STRING;
	}
	
	template<> 
	inline int dbusPreferedType<char*>() 
	{
    	return DBUS_TYPE_STRING;
	}

	template<> 
	inline int dbusPreferedType<std::string>() 
	{
    	return DBUS_TYPE_STRING;
	}

}
}

#endif /*  DBUSTL_TYPES_TOOLS */
