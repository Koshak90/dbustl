/*
 *  DBUSTL - DBus Template Library
 *
 *  Copyright (C) 2008  Fabien Chevalier <fabchevalier@free.fr>
 *  
 *
 *  This file is part of the DBus Template Library.
 *
 *  The DBus Template Library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  DBus Template Library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with DBus Template Library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef DBUSTL_TYPES_TOOLS
#define DBUSTL_TYPES_TOOLS

#include <dbus/dbus.h>

#include <string>
#include <cassert>

namespace dbustl {
namespace types {

	//For all basic types : the DBUS type into which the C++ type maps
	//This is non trivial as for instance an int will map on DBUS_TYPE_INT32 on
	//32 bit plaftorm but DBUS_TYPE_INT64 on 64 bits platforms
	
	template<typename T>
	struct dbusPreferedType;
	
	/* Implementation */
	
	template<int size, bool sign>
	struct __dbusPreferedIntegralType;

	template<>
	struct __dbusPreferedIntegralType<1, true> {
		static const int value = DBUS_TYPE_INT16;
	};
	template<>
	struct __dbusPreferedIntegralType<2, true> {
		static const int value = DBUS_TYPE_INT16;
	};
	template<>
	struct __dbusPreferedIntegralType<4, true> {
		static const int value = DBUS_TYPE_INT32;
	};
	template<>
	struct __dbusPreferedIntegralType<8, true> {
		static const int value = DBUS_TYPE_INT64;
	};
	
	template<>
	struct __dbusPreferedIntegralType<1, false> {
		static const int value = DBUS_TYPE_BYTE;
	};
	template<>
	struct __dbusPreferedIntegralType<2, false> {
		static const int value = DBUS_TYPE_UINT16;
	};
	template<>
	struct __dbusPreferedIntegralType<4, false> {
		static const int value = DBUS_TYPE_UINT32;
	};
	template<>
	struct __dbusPreferedIntegralType<8, false> {
		static const int value = DBUS_TYPE_UINT64;
	};

	template<>
	struct dbusPreferedType<bool> {
		static const int value = DBUS_TYPE_BOOLEAN;
	};

	template<>
	struct dbusPreferedType<char> {
		static const int value = __dbusPreferedIntegralType<sizeof(char), false>::value;
	};
	
	template<>
	struct dbusPreferedType<signed char> {
		static const int value = __dbusPreferedIntegralType<sizeof(signed char), true>::value;
	};

	template<>
	struct dbusPreferedType<unsigned char> {
		static const int value = __dbusPreferedIntegralType<sizeof(unsigned char), false>::value;
	};

	template<>
	struct dbusPreferedType<short> {
		static const int value = __dbusPreferedIntegralType<sizeof(short), true>::value;
	};

	template<>
	struct dbusPreferedType<unsigned short> {
		static const int value = __dbusPreferedIntegralType<sizeof(unsigned short), false>::value;
	};

	template<>
	struct dbusPreferedType<int> {
		static const int value = __dbusPreferedIntegralType<sizeof(int), true>::value;
	};

	template<>
	struct dbusPreferedType<unsigned int> {
		static const int value = __dbusPreferedIntegralType<sizeof(unsigned int), false>::value;
	};
	
	template<>
	struct dbusPreferedType<long> {
		static const int value = __dbusPreferedIntegralType<sizeof(long), true>::value;
	};

	template<>
	struct dbusPreferedType<unsigned long> {
		static const int value = __dbusPreferedIntegralType<sizeof(unsigned long), false>::value;
	};
	
	template<>
	struct dbusPreferedType<long long> {
		static const int value = __dbusPreferedIntegralType<sizeof(long long), true>::value;
	};

	template<>
	struct dbusPreferedType<unsigned long long> {
		static const int value = __dbusPreferedIntegralType<sizeof(unsigned long long), false>::value;
	};
	
	template<>
	struct dbusPreferedType<float> {
		static const int value = DBUS_TYPE_DOUBLE;
	};

	template<>
	struct dbusPreferedType<double> {
		static const int value = DBUS_TYPE_DOUBLE;
	};
	
	template<>
	struct dbusPreferedType<const char *> {
		static const int value = DBUS_TYPE_STRING;
	};
	
	template<>
	struct dbusPreferedType<char *> {
		static const int value = DBUS_TYPE_STRING;
	};

	template<>
	struct dbusPreferedType<std::string> {
		static const int value = DBUS_TYPE_STRING;
	};

}
}

#endif /*  DBUSTL_TYPES_TOOLS */
