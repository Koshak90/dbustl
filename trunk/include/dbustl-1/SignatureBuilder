/*
 *  DBusTL - D-Bus Template Library
 *
 *  Copyright (C) 2008, 2009  Fabien Chevalier <chefabien@gmail.com>
 *  
 *
 *  This file is part of the D-Bus Template Library.
 *
 *  The D-Bus Template Library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  D-Bus Template Library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with D-Bus Template Library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef DBUSTL_SIGNATUREBUILDER
#define DBUSTL_SIGNATUREBUILDER

#include <dbustl-1/Iterators>
#include <dbustl-1/types/Serialization>

namespace dbustl {

#ifdef DBUSTL_CXX0X
    /** @cond */
    
    template<typename... Args>
    struct __SignatureBuilderImpl;

    template<>
    struct __SignatureBuilderImpl<> {
        static void compute(const char* sig[], int i)
        {
            sig[i] = 0;
        }
    };
    
    template<typename T, typename... Args>
    struct __SignatureBuilderImpl<T, Args... > {
        static void compute(const char* sig[], int i)
        {
            using namespace types;
            sig[i] = Signature<T>();
            __SignatureBuilderImpl<Args...>::compute(sig, ++i);
        }
    };

    /** @endcond */

    template<typename... Args>
    const char* const * SignatureBuilder()
    {
        static const char* sig[sizeof...(Args) + 1];
        int i = 0;
        
        __SignatureBuilderImpl<Args...>::compute(sig, i);
        return sig;
    }
    
#else /* DBUSTL_CXX0X */

    inline const char* const * SignatureBuilder()
    {
        static const char* sig[] = {0};
        return sig;
    }

    #define SIGNATUREBUILDER_TYPENAME_TX(num) \
        typename T##num
        
    #define SIGNATUREBUILDER_SIGNATURE(num) Signature<T##num>()

    #define SIGNATUREBUILDER_DEFINE(num) \
    template<DBUSTL_ITERATE_COMMA_##num(SIGNATUREBUILDER_TYPENAME_TX)> \
    const char* const * SignatureBuilder() \
    { \
        using namespace types; \
        static const char* sig[] = { \
            DBUSTL_ITERATE_COMMA_##num(SIGNATUREBUILDER_SIGNATURE), \
            0 \
            }; \
        return sig; \
    }

    SIGNATUREBUILDER_DEFINE(1);        
    SIGNATUREBUILDER_DEFINE(2);
    SIGNATUREBUILDER_DEFINE(3);
    SIGNATUREBUILDER_DEFINE(4);
    SIGNATUREBUILDER_DEFINE(5);
    SIGNATUREBUILDER_DEFINE(6);
    SIGNATUREBUILDER_DEFINE(7);
    SIGNATUREBUILDER_DEFINE(8);
    SIGNATUREBUILDER_DEFINE(9);
    SIGNATUREBUILDER_DEFINE(10);
    SIGNATUREBUILDER_DEFINE(11);
    SIGNATUREBUILDER_DEFINE(12);
    SIGNATUREBUILDER_DEFINE(13);
    SIGNATUREBUILDER_DEFINE(14);
    SIGNATUREBUILDER_DEFINE(15);
    SIGNATUREBUILDER_DEFINE(16);

#endif /* DBUSTL_CXX0X */

}

#endif /* DBUSTL_SIGNATUREBUILDER */
